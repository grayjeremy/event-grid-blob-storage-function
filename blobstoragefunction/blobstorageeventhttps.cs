
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Azure.WebJobs.Host;
using Newtonsoft.Json;
using System.Threading.Tasks;
using System.Net.Http;
using Microsoft.Azure.EventGrid.Models;
using Microsoft.Azure.EventGrid;
using Newtonsoft.Json.Linq;
using System;
using System.Net;
using Newtonsoft.Json.Serialization;
using blobstoragefunction.Microsoft.Azure.EventGrid.Models;

namespace blobstoragefunction
{
    public static class blobstorageeventhttps
    {
        [FunctionName("blobstorageeventhttps")]
        public static IActionResult Run([HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)]HttpRequest req, TraceWriter log)
        {

            log.Info($"C# HTTP trigger function begun");
            string response = string.Empty;
            const string SubscriptionValidationEvent = "Microsoft.EventGrid.SubscriptionValidationEvent";

            string requestContent = new StreamReader(req.Body).ReadToEnd();
            
            EventGridEvent[] eventGridEvents = JsonConvert.DeserializeObject<EventGridEvent[]>(requestContent);

            foreach (EventGridEvent eventGridEvent in eventGridEvents)
            {
                JObject dataObject = eventGridEvent.Data as JObject;

                // Deserialize the event data into the appropriate type based on event type
                if (string.Equals(eventGridEvent.EventType, SubscriptionValidationEvent, StringComparison.OrdinalIgnoreCase))
                {
                    var eventData = dataObject.ToObject<SubscriptionValidationEventData>();
                    log.Info($"Got SubscriptionValidation event data, validation code: {eventData.ValidationCode}, topic: {eventGridEvent.Topic}");
                    // Do any additional validation (as required) and then return back the below response
                    var responseData = new SubscriptionValidationResponse();
                    responseData.ValidationResponse = eventData.ValidationCode;

                    return (ActionResult)new OkObjectResult(responseData);

                }
            }

            return (ActionResult)new OkObjectResult(response);      
        }
    }

    // <auto-generated>
    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License. See License.txt in the project root for
    // license information.
    //
    // Code generated by Microsoft (R) AutoRest Code Generator.
    // Changes may cause incorrect behavior and will be lost if the code is
    // regenerated.
    // </auto-generated>

    namespace Microsoft.Azure.EventGrid.Models
    {
        using Newtonsoft.Json;
        using System.Linq;

        /// <summary>
        /// Schema of the Data property of an EventGridEvent for a
        /// Microsoft.EventGrid.SubscriptionValidationEvent.
        /// </summary>
        public partial class SubscriptionValidationEventData
        {
            /// <summary>
            /// Initializes a new instance of the SubscriptionValidationEventData
            /// class.
            /// </summary>
            public SubscriptionValidationEventData()
            {
                CustomInit();
            }

            /// <summary>
            /// Initializes a new instance of the SubscriptionValidationEventData
            /// class.
            /// </summary>
            /// <param name="validationCode">The validation code sent by Azure
            /// Event Grid to validate an event subscription. To complete the
            /// validation handshake, the subscriber must either respond with this
            /// validation code as part of the validation response, or perform a
            /// GET request on the validationUrl (available starting version
            /// 2018-05-01-preview).</param>
            /// <param name="validationUrl">The validation URL sent by Azure Event
            /// Grid (available starting version 2018-05-01-preview). To complete
            /// the validation handshake, the subscriber must either respond with
            /// the validationCode as part of the validation response, or perform a
            /// GET request on the validationUrl (available starting version
            /// 2018-05-01-preview).</param>
            public SubscriptionValidationEventData(string validationCode = default(string), string validationUrl = default(string))
            {
                ValidationCode = validationCode;
                ValidationUrl = validationUrl;
                CustomInit();
            }

            /// <summary>
            /// An initialization method that performs custom operations like setting defaults
            /// </summary>
            partial void CustomInit();

            /// <summary>
            /// Gets the validation code sent by Azure Event Grid to validate an
            /// event subscription. To complete the validation handshake, the
            /// subscriber must either respond with this validation code as part of
            /// the validation response, or perform a GET request on the
            /// validationUrl (available starting version 2018-05-01-preview).
            /// </summary>
            [JsonProperty(PropertyName = "validationCode")]
            public string ValidationCode { get; private set; }

            /// <summary>
            /// Gets the validation URL sent by Azure Event Grid (available
            /// starting version 2018-05-01-preview). To complete the validation
            /// handshake, the subscriber must either respond with the
            /// validationCode as part of the validation response, or perform a GET
            /// request on the validationUrl (available starting version
            /// 2018-05-01-preview).
            /// </summary>
            [JsonProperty(PropertyName = "validationUrl")]
            public string ValidationUrl { get; private set; }

        }
    }

    // <auto-generated>
    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License. See License.txt in the project root for
    // license information.
    //
    // Code generated by Microsoft (R) AutoRest Code Generator.
    // Changes may cause incorrect behavior and will be lost if the code is
    // regenerated.
    // </auto-generated>

    namespace Microsoft.Azure.EventGrid.Models
    {
        using Newtonsoft.Json;
        using System.Linq;

        /// <summary>
        /// To complete an event subscription validation handshake, a subscriber
        /// can use either the validationCode or the validationUrl received in a
        /// SubscriptionValidationEvent. When the validationCode is used, the
        /// SubscriptionValidationResponse can be used to build the response.
        /// </summary>
        public partial class SubscriptionValidationResponse
        {
            /// <summary>
            /// Initializes a new instance of the SubscriptionValidationResponse
            /// class.
            /// </summary>
            public SubscriptionValidationResponse()
            {
                CustomInit();
            }

            /// <summary>
            /// Initializes a new instance of the SubscriptionValidationResponse
            /// class.
            /// </summary>
            /// <param name="validationResponse">The validation response sent by
            /// the subscriber to Azure Event Grid to complete the validation of an
            /// event subscription.</param>
            public SubscriptionValidationResponse(string validationResponse = default(string))
            {
                ValidationResponse = validationResponse;
                CustomInit();
            }

            /// <summary>
            /// An initialization method that performs custom operations like setting defaults
            /// </summary>
            partial void CustomInit();

            /// <summary>
            /// Gets or sets the validation response sent by the subscriber to
            /// Azure Event Grid to complete the validation of an event
            /// subscription.
            /// </summary>
            [JsonProperty(PropertyName = "validationResponse")]
            public string ValidationResponse { get; set; }

        }
    }

}
